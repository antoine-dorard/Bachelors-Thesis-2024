{"results": {"android_logging": {"files": [{"file_path": "dataset/DodoVulnerableBank/DodoBank/app/src/main/java/org/cysecurity/example/dodobank/Statement.java", "match_position": [17, 92], "match_lines": [94, 94], "match_string": "                Log.i(\"StatementRequest\", \"Retrieving data for Customer Id:\" + customerID);", "summaries": {"method": "This code defines a doInBackground method that retrieves data for a specific customer ID by sending a login request to a server and returning the response as a JSONObject.", "class": "The `StatementTask` class extends `AsyncTask` and is responsible for retrieving a statement from a server, processing the data, and updating the UI accordingly.", "cluster": "These Java methods perform asynchronous operations to communicate with a server using HTTP requests, handling tasks such as retrieving account beneficiaries, account details, transaction statements, transfers, and user logins while converting InputStream responses to Strings."}}, {"file_path": "dataset/DodoVulnerableBank/DodoBank/app/src/main/java/org/cysecurity/example/dodobank/controller/Encryption.java", "match_position": [13, 64], "match_lines": [59, 60], "match_string": "            byte[] plaintext = cipher.doFinal(cipherBytes);\n            Log.d(\"Decrypted\",new String(plaintext , \"UTF-8\"));", "summaries": {"method": "This Java code decrypts a given cipher text using a provided key using AES encryption with CBC mode and PKCS5 padding.", "class": "The Encryption class provides methods to encrypt and decrypt data using AES encryption with CBC mode and PKCS5 padding. ", "cluster": "These methods collectively handle encryption, decryption, UI updates, and data manipulation in a secure transaction statement Android application."}}], "metadata": {"cwe": "CWE-532: Insertion of Sensitive Information into Log File", "masvs": "MSTG-STORAGE-3", "owasp-mobile": "M1: Improper Platform Usage", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#logs", "description": "The App logs information. Please ensure that sensitive information is never logged.", "severity": "INFO"}}, "hardcoded_password": {"files": [{"file_path": "dataset/DodoVulnerableBank/DodoBank/app/src/main/java/org/cysecurity/example/dodobank/model/DatabaseHelper.java", "match_position": [5, 60], "match_lines": [14, 14], "match_string": "    public static final String COLUMN_PASSWORD = \"password\";"}], "metadata": {"cwe": "CWE-798: Use of Hard-coded Credentials", "masvs": "MSTG-STORAGE-14", "owasp-mobile": "M9: Reverse Engineering", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example", "description": "A hardcoded password in plain text is identified.", "severity": "WARNING"}}, "hardcoded_username": {"files": [{"file_path": "dataset/DodoVulnerableBank/DodoBank/app/src/main/java/org/cysecurity/example/dodobank/model/DatabaseHelper.java", "match_position": [5, 53], "match_lines": [11, 11], "match_string": "    public static final String TABLE_USERS = \"users\";"}, {"file_path": "dataset/DodoVulnerableBank/DodoBank/app/src/main/java/org/cysecurity/example/dodobank/model/DatabaseHelper.java", "match_position": [5, 60], "match_lines": [13, 13], "match_string": "    public static final String COLUMN_USERNAME = \"username\";"}], "metadata": {"cwe": "CWE-798: Use of Hard-coded Credentials", "masvs": "MSTG-STORAGE-14", "owasp-mobile": "M9: Reverse Engineering", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example", "description": "A hardcoded username in plain text is identified.", "severity": "WARNING"}}, "cbc_padding_oracle": {"files": [{"file_path": "dataset/DodoVulnerableBank/DodoBank/app/src/main/java/org/cysecurity/example/dodobank/controller/Encryption.java", "match_position": [29, 71], "match_lines": [34, 34], "match_string": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");", "summaries": {"method": "This code defines a method that encrypts a given plaintext using AES encryption with a provided key and returns the encrypted text as a Base64 encoded string.", "class": "The Encryption class provides methods to encrypt and decrypt data using AES encryption with CBC mode and PKCS5 padding. ", "cluster": "These methods collectively handle encryption, decryption, UI updates, and data manipulation in a secure transaction statement Android application."}}, {"file_path": "dataset/DodoVulnerableBank/DodoBank/app/src/main/java/org/cysecurity/example/dodobank/controller/Encryption.java", "match_position": [29, 71], "match_lines": [56, 56], "match_string": "            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");", "summaries": {"method": "This Java code decrypts a given cipher text using a provided key using AES encryption with CBC mode and PKCS5 padding.", "class": "The Encryption class provides methods to encrypt and decrypt data using AES encryption with CBC mode and PKCS5 padding. ", "cluster": "These methods collectively handle encryption, decryption, UI updates, and data manipulation in a secure transaction statement Android application."}}], "metadata": {"cwe": "CWE-649: Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking", "masvs": "MSTG-CRYPTO-3", "owasp-mobile": "M5: Insufficient Cryptography", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#padding-oracle-attacks-due-to-weaker-padding-or-block-operation-implementations", "description": "The App uses the encryption mode CBC with PKCS5/PKCS7 padding. This configuration is vulnerable to padding oracle attacks.", "severity": "ERROR"}}, "sqlite_injection": {"files": [{"file_path": "dataset/DodoVulnerableBank/DodoBank/app/src/main/java/org/cysecurity/example/dodobank/controller/TransactionTable.java", "match_position": [13, 27], "match_lines": [56, 59], "match_string": "            Cursor tmpCurosr =db.rawQuery(\n                    \"select \"+DatabaseHelper.TRANSACTION_ID+\" from \"+DatabaseHelper.TABLE_TRANSACTIONS\n                            +\" where \"+DatabaseHelper.TRANSACTION_ID+\"=\"+id\n                    ,null);", "summaries": {"method": "This code defines a method to insert a transaction entry into a database, checking for an existing entry with the same ID and logging the transaction details if inserted successfully.", "class": "The code defines a class `TransactionTable` that manages transactions in a database, providing methods to insert, retrieve, and clear transaction records.", "cluster": "The cluster of Java methods includes functionalities for checking if a user is logged in, retrieving a list of transactions, writing user data to a file, handling database connections opening/closing, user session management (login/logout), clearing local data, and performing HTTP POST requests with SSL."}}], "metadata": {"cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "masvs": "MSTG-PLATFORM-2", "owasp-mobile": "M7: Client Code Quality", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2", "description": "App uses SQLite Database and execute raw SQL query. Untrusted user input in raw SQL queries can cause SQL Injection. Also sensitive information should be encrypted and written to the database.", "severity": "WARNING"}}, "accept_self_signed_certificate": {"files": [{"file_path": "dataset/DodoVulnerableBank/DodoBank/app/src/main/java/org/cysecurity/example/dodobank/model/SecureURLOpen.java", "match_position": [13, 37], "match_lines": [61, 74], "match_string": "            SSLContext sc = SSLContext.getInstance(\"TLS\");\n            sc.init(null, new X509TrustManager[]{new X509TrustManager() {\n                public void checkClientTrusted(X509Certificate[] chain,\n                                               String authType) throws CertificateException {\n                }\n\n                public void checkServerTrusted(X509Certificate[] chain,\n                                               String authType) throws CertificateException {\n                }\n\n                public X509Certificate[] getAcceptedIssuers() {\n                    return new X509Certificate[0];\n                }\n            }}, new SecureRandom());", "summaries": {"method": "This code creates an SSL socket factory that initializes an SSLContext with a custom X509TrustManager to trust all certificates, and returns the socket factory.", "class": "The provided code defines a class `SecureURLOpen` that assists in opening secure URLs using HTTPS connections, allowing for both POST and GET requests and includes methods to set up a custom SSL socket factory and trust all host names (insecure method recommended only for emulator usage).", "cluster": "The cluster of Java methods includes functionalities for user authentication and permission management, setting up and modifying user preferences, performing secure HTTPS connections, handling database operations like creating tables and deleting users, as well as UI interactions such as displaying and copying text, creating transactions, and managing different activities within the application."}}, {"file_path": "dataset/DodoVulnerableBank/DodoBank/app/src/main/java/org/cysecurity/example/dodobank/model/SecureURLOpen.java", "match_position": [17, 18], "match_lines": [71, 73], "match_string": "                public X509Certificate[] getAcceptedIssuers() {\n                    return new X509Certificate[0];\n                }", "summaries": {"method": "The code defines a method that returns an empty array of X509Certificates representing the accepted issuers for certificates.", "class": "The provided code defines a class `SecureURLOpen` that assists in opening secure URLs using HTTPS connections, allowing for both POST and GET requests and includes methods to set up a custom SSL socket factory and trust all host names (insecure method recommended only for emulator usage).", "cluster": "The cluster of Java methods includes functionalities for user authentication and permission management, setting up and modifying user preferences, performing secure HTTPS connections, handling database operations like creating tables and deleting users, as well as UI interactions such as displaying and copying text, creating transactions, and managing different activities within the application."}}, {"file_path": "dataset/DodoVulnerableBank/DodoBank/app/src/main/java/org/cysecurity/example/dodobank/model/SecureURLOpen.java", "match_position": [17, 18], "match_lines": [92, 94], "match_string": "                public boolean verify(String hostname, SSLSession session) {\n                    return true;\n                }", "summaries": {"method": "This Java code defines a method that always returns true, taking a hostname and SSL session as parameters, used for verification.", "class": "The provided code defines a class `SecureURLOpen` that assists in opening secure URLs using HTTPS connections, allowing for both POST and GET requests and includes methods to set up a custom SSL socket factory and trust all host names (insecure method recommended only for emulator usage).", "cluster": "The cluster of Java methods includes functionalities for user authentication and permission management, setting up and modifying user preferences, performing secure HTTPS connections, handling database operations like creating tables and deleting users, as well as UI interactions such as displaying and copying text, creating transactions, and managing different activities within the application."}}], "metadata": {"cwe": "CWE-295: Improper Certificate Validation", "masvs": "MSTG-NETWORK-3", "owasp-mobile": "M3: Insecure Communication", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-endpoint-identify-verification-mstg-network-3", "description": "Insecure Implementation of SSL. Trusting all the certificates or accepting self signed certificates is a critical Security Hole. This application is vulnerable to MITM attacks.", "severity": "ERROR"}}, "android_manifest_allow_backup": {"files": [{"file_path": "/home/antoine/UM/thesis/PythonProject/dataset/DodoVulnerableBank/DodoBank/app/src/main/AndroidManifest.xml", "match_position": [1, 1], "match_lines": [1, 1], "match_string": "android:allowBackup=true"}], "metadata": {"cwe": "cwe-921", "owasp-mobile": "m1", "masvs": "storage-8", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#static-analysis-7", "description": "This flag allows anyone to backup your application data via adb. It allows users who have enabled USB debugging to copy application data off of the device.", "severity": "WARNING"}}, "android_task_hijacking2": {"files": [{"file_path": "/home/antoine/UM/thesis/PythonProject/dataset/DodoVulnerableBank/DodoBank/app/src/main/AndroidManifest.xml", "match_position": [1, 1], "match_lines": [1, 1], "match_string": "Activity exported, targetSdk<29 and launchMode != singleInstance or taskAffinity is not empty"}, {"file_path": "/home/antoine/UM/thesis/PythonProject/dataset/DodoVulnerableBank/DodoBank/app/src/main/AndroidManifest.xml", "match_position": [1, 1], "match_lines": [1, 1], "match_string": "Activity exported, targetSdk<29 and launchMode != singleInstance or taskAffinity is not empty"}, {"file_path": "/home/antoine/UM/thesis/PythonProject/dataset/DodoVulnerableBank/DodoBank/app/src/main/AndroidManifest.xml", "match_position": [1, 1], "match_lines": [1, 1], "match_string": "Activity exported, targetSdk<29 and launchMode != singleInstance or taskAffinity is not empty"}], "metadata": {"cwe": "cwe-1021", "owasp-mobile": "m1", "masvs": "platform-1", "reference": "https://github.com/OWASP/owasp-mastg/blob/master/Document/0x05a-Platform-Overview.md", "description": "Activity is found to be vulnerable to StrandHogg 2.0 task hijacking vulnerability. When vulnerable, it is possible for other applications to place a malicious activity on top of the activity stack of the vulnerable application. This makes the application an easy target for phishing attacks. The vulnerability can be remediated by setting the launch mode attribute to \"singleInstance\" and by setting an empty taskAffinity (taskAffinity=\"\"). You can also update the target SDK version (26) of the app to 29 or higher to fix this issue at platform level.", "severity": "ERROR"}}, "android_certificate_pinning": {"metadata": {"cwe": "CWE-295: Improper Certificate Validation", "owasp-mobile": "M3: Insecure Communication", "masvs": "MSTG-NETWORK-4", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4", "description": "This app does not use a TLS/SSL certificate or public key pinning in code to detect or prevent MITM attacks in secure communication channel. Please verify if pinning is enabled in `network_security_config.xml`.", "severity": "INFO"}}, "android_safetynet_api": {"metadata": {"cwe": "CWE-353: Missing Support for Integrity Check", "owasp-mobile": "M8: Code Tampering", "masvs": "MSTG-RESILIENCE-1", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1", "description": "This app does not uses SafetyNet Attestation API that provides cryptographically-signed attestation, assessing the device's integrity. This check helps to ensure that the servers are interacting with the genuine app running on a genuine Android device. ", "severity": "INFO"}}, "android_prevent_screenshot": {"metadata": {"cwe": "CWE-200: Information Exposure", "owasp-mobile": "M2: Insecure Data Storage", "masvs": "MSTG-STORAGE-9", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#finding-sensitive-information-in-auto-generated-screenshots-mstg-storage-9", "description": "This app does not have capabilities to prevent against Screenshots from Recent Task History/ Now On Tap etc.", "severity": "INFO"}}, "android_certificate_transparency": {"metadata": {"cwe": "CWE-295: Improper Certificate Validation", "owasp-mobile": "M3: Insecure Communication", "masvs": "MSTG-NETWORK-4", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4", "description": "This app does not enforce TLS Certificate Transparency that helps to detect SSL certificates that have been mistakenly issued by a certificate authority or maliciously acquired from an otherwise unimpeachable certificate authority.", "severity": "INFO"}}, "android_detect_tapjacking": {"metadata": {"cwe": "CWE-200: Information Exposure", "owasp-mobile": "M1: Improper Platform Usage", "masvs": "MSTG-PLATFORM-9", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-for-overlay-attacks-mstg-platform-9", "description": "This app does not have capabilities to prevent tapjacking attacks. An attacker can hijack the user's taps and tricks him into performing some critical operations that he did not intend to.", "severity": "INFO"}}, "android_root_detection": {"metadata": {"cwe": "CWE-919: Weaknesses in Mobile Applications", "owasp-mobile": "M8: Code Tampering", "masvs": "MSTG-RESILIENCE-1", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1", "description": "This app does not have root detection capabilities. Running a sensitive application on a rooted device questions the device integrity and affects users data.", "severity": "INFO"}}}, "errors": []}