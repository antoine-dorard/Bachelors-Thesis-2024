{"results": {"android_hidden_ui": {"files": [{"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/AccessControl3NotesActivity.java", "match_position": [13, 50], "match_lines": [72, 72], "match_string": "            pinTxt.setVisibility(View.INVISIBLE);", "summaries": {"method": "This code defines a method to access and display private notes if a correct pin is entered, otherwise shows a message to enter a valid pin.", "class": "This code defines an Android activity for accessing private notes with a pin verification mechanism.", "cluster": "Cluster could not be determined for this method."}, "label": {"false_positive": false, "confidence": 0.9}}, {"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/AccessControl3NotesActivity.java", "match_position": [13, 51], "match_lines": [73, 73], "match_string": "            abutton.setVisibility(View.INVISIBLE);", "summaries": {"method": "This code defines a method to access and display private notes if a correct pin is entered, otherwise shows a message to enter a valid pin.", "class": "This code defines an Android activity for accessing private notes with a pin verification mechanism.", "cluster": "Cluster could not be determined for this method."}, "label": {"false_positive": true, "confidence": 0.9}}], "metadata": {"cwe": "CWE-919: Weaknesses in Mobile Applications", "masvs": "MSTG-STORAGE-7", "owasp-mobile": "M1: Improper Platform Usage", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#checking-for-sensitive-data-disclosure-through-the-user-interface-mstg-storage-7", "description": "Hidden elements in view can be used to hide data from user. But this data can be leaked.", "severity": "ERROR"}}, "android_logging": {"files": [{"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage2Activity.java", "match_position": [13, 88], "match_lines": [57, 57], "match_string": "            Log.d(\"Diva\", \"Error occurred while creating database: \" + e.getMessage());", "summaries": {"method": "The code creates a database table for user credentials and displays a layout for insecure data storage.", "class": "This Java class extends AppCompatActivity and allows for the creation of insecure data storage with methods for creating a database table and saving user credentials.", "cluster": "The cluster of methods creates a database, a table within that database, and handles potential exceptions, before setting the content view of the activity."}, "label": {"false_positive": false, "confidence": 0.9}}, {"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage2Activity.java", "match_position": [13, 94], "match_lines": [71, 71], "match_string": "            Log.d(\"Diva\", \"Error occurred while inserting into database: \" + e.getMessage());", "summaries": {"method": "This method saves user credentials into a SQLite database and displays a message confirming successful saving.", "class": "This Java class extends AppCompatActivity and allows for the creation of insecure data storage with methods for creating a database table and saving user credentials.", "cluster": "Cluster could not be determined for this method."}, "label": {"false_positive": true, "confidence": 0.8}}, {"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage3Activity.java", "match_position": [13, 60], "match_lines": [72, 72], "match_string": "            Log.d(\"Diva\", \"File error: \" + e.getMessage());", "summaries": {"method": "This code defines a method to save entered credentials into a temporary file for later use, displaying success or error messages accordingly.", "class": "This code defines an activity that allows users to save credentials in a temporary file with insecure data storage practices.", "cluster": "Cluster could not be determined for this method."}, "label": {"false_positive": false, "confidence": 0.9}}, {"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage4Activity.java", "match_position": [13, 60], "match_lines": [71, 71], "match_string": "            Log.d(\"Diva\", \"File error: \" + e.getMessage());", "summaries": {"method": "This code saves user credentials (username and password) to a text file on external storage and displays a success or error message accordingly.", "class": "This Java class extends AppCompatActivity and allows saving user credentials insecurely to an external storage directory.", "cluster": "Cluster could not be determined for this method."}, "label": {"false_positive": false, "confidence": 0.8}}, {"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/LogActivity.java", "match_position": [9, 10], "match_lines": [50, 58], "match_string": "        EditText cctxt = (EditText) findViewById(R.id.ccText);\n        try {\n            // Assuming we do some HTTP requests credit card validation and processing\n            //Everything seems fine and then we hit some unforseen error\n            processCC(cctxt.getText().toString());\n        } catch (RuntimeException re) {\n            Log.e(\"diva-log\", \"Error while processing transaction with credit card: \" + cctxt.getText().toString());\n            Toast.makeText(this, \"An error occured. Please try again later\", Toast.LENGTH_SHORT).show();\n        }", "summaries": {"method": "The code defines a method \"checkout\" that processes a credit card transaction entered in an EditText field, handling any runtime exceptions that may occur during the process by logging an error and displaying a corresponding toast message to the user.", "class": "This code defines a class `LogActivity` that extends `AppCompatActivity` and handles logging activities and credit card processing, including error handling for processing transactions.", "cluster": "The cluster of methods includes a `checkout` method that handles credit card transactions by validating and processing credit card information, and a `processCC` method that performs important processing related to the credit card information and throws a `RuntimeException` if an error occurs."}, "label": {"false_positive": false, "confidence": 1.0}}, {"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/LogActivity.java", "match_position": [13, 117], "match_lines": [56, 56], "match_string": "            Log.e(\"diva-log\", \"Error while processing transaction with credit card: \" + cctxt.getText().toString());", "summaries": {"method": "The code defines a method \"checkout\" that processes a credit card transaction entered in an EditText field, handling any runtime exceptions that may occur during the process by logging an error and displaying a corresponding toast message to the user.", "class": "This code defines a class `LogActivity` that extends `AppCompatActivity` and handles logging activities and credit card processing, including error handling for processing transactions.", "cluster": "The cluster of methods includes a `checkout` method that handles credit card transactions by validating and processing credit card information, and a `processCC` method that performs important processing related to the credit card information and throws a `RuntimeException` if an error occurs."}, "label": {"false_positive": false, "confidence": 1.0}}, {"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/SQLInjectionActivity.java", "match_position": [13, 102], "match_lines": [61, 61], "match_string": "            Log.d(\"Diva-sqli\", \"Error occurred while creating database for SQLI: \" + e.getMessage());", "summaries": {"method": "The code creates a database in Android with a table to store user information and credit card details, handling any exceptions that may occur during the process.", "class": "This code defines an activity in an Android application that creates a local database with user information, allows searching for users in the database, and displays the results.", "cluster": "This cluster of methods creates a database in the app, handling table creation and data insertion, while catching potential errors, ultimately setting the view for a SQL injection activity."}, "label": {"false_positive": false, "confidence": 0.9}}, {"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/SQLInjectionActivity.java", "match_position": [13, 97], "match_lines": [85, 85], "match_string": "            Log.d(\"Diva-sqli\", \"Error occurred while searching in database: \" + e.getMessage());", "summaries": {"method": "This code defines a method that searches a database for a user's information based on the input text, displaying the results in a toast message or logging an error if there is an exception during the search.", "class": "This code defines an activity in an Android application that creates a local database with user information, allows searching for users in the database, and displays the results.", "cluster": "Cluster could not be determined for this method."}, "label": {"false_positive": false, "confidence": 0.9}}], "metadata": {"cwe": "CWE-532: Insertion of Sensitive Information into Log File", "masvs": "MSTG-STORAGE-3", "owasp-mobile": "M1: Improper Platform Usage", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#logs", "description": "The App logs information. Please ensure that sensitive information is never logged.", "severity": "INFO"}}, "sqlite_injection": {"files": [{"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage2Activity.java", "match_position": [13, 124], "match_lines": [67, 67], "match_string": "            mDB.execSQL(\"INSERT INTO myuser VALUES ('\"+ usr.getText().toString() +\"', '\"+ pwd.getText().toString() +\"');\");", "summaries": {"method": "This method saves user credentials into a SQLite database and displays a message confirming successful saving.", "class": "This Java class extends AppCompatActivity and allows for the creation of insecure data storage with methods for creating a database table and saving user credentials.", "cluster": "Cluster could not be determined for this method."}, "label": {"false_positive": false, "confidence": 0.9}}, {"file_path": "dataset/diva-android/app/src/main/java/jakhar/aseem/diva/SQLInjectionActivity.java", "match_position": [13, 115], "match_lines": [70, 70], "match_string": "            cr = mDB.rawQuery(\"SELECT * FROM sqliuser WHERE user = '\" + srchtxt.getText().toString() + \"'\", null);", "summaries": {"method": "This code defines a method that searches a database for a user's information based on the input text, displaying the results in a toast message or logging an error if there is an exception during the search.", "class": "This code defines an activity in an Android application that creates a local database with user information, allows searching for users in the database, and displays the results.", "cluster": "Cluster could not be determined for this method."}, "label": {"false_positive": false, "confidence": 1.0}}], "metadata": {"cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "masvs": "MSTG-PLATFORM-2", "owasp-mobile": "M7: Client Code Quality", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2", "description": "App uses SQLite Database and execute raw SQL query. Untrusted user input in raw SQL queries can cause SQL Injection. Also sensitive information should be encrypted and written to the database.", "severity": "WARNING"}}, "android_manifest_allow_backup": {"files": [{"file_path": "/home/antoine/UM/thesis/PythonProject/dataset/diva-android/app/src/main/AndroidManifest.xml", "match_position": [1, 1], "match_lines": [1, 1], "match_string": "android:allowBackup=true", "label": {"false_positive": false, "confidence": 0.9}}], "metadata": {"cwe": "cwe-921", "owasp-mobile": "m1", "masvs": "storage-8", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#static-analysis-7", "description": "This flag allows anyone to backup your application data via adb. It allows users who have enabled USB debugging to copy application data off of the device.", "severity": "WARNING"}}, "android_safetynet_api": {"metadata": {"cwe": "CWE-353: Missing Support for Integrity Check", "owasp-mobile": "M8: Code Tampering", "masvs": "MSTG-RESILIENCE-1", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1", "description": "This app does not uses SafetyNet Attestation API that provides cryptographically-signed attestation, assessing the device's integrity. This check helps to ensure that the servers are interacting with the genuine app running on a genuine Android device. ", "severity": "INFO"}}, "android_detect_tapjacking": {"metadata": {"cwe": "CWE-200: Information Exposure", "owasp-mobile": "M1: Improper Platform Usage", "masvs": "MSTG-PLATFORM-9", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-for-overlay-attacks-mstg-platform-9", "description": "This app does not have capabilities to prevent tapjacking attacks. An attacker can hijack the user's taps and tricks him into performing some critical operations that he did not intend to.", "severity": "INFO"}}, "android_prevent_screenshot": {"metadata": {"cwe": "CWE-200: Information Exposure", "owasp-mobile": "M2: Insecure Data Storage", "masvs": "MSTG-STORAGE-9", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#finding-sensitive-information-in-auto-generated-screenshots-mstg-storage-9", "description": "This app does not have capabilities to prevent against Screenshots from Recent Task History/ Now On Tap etc.", "severity": "INFO"}}, "android_certificate_transparency": {"metadata": {"cwe": "CWE-295: Improper Certificate Validation", "owasp-mobile": "M3: Insecure Communication", "masvs": "MSTG-NETWORK-4", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4", "description": "This app does not enforce TLS Certificate Transparency that helps to detect SSL certificates that have been mistakenly issued by a certificate authority or maliciously acquired from an otherwise unimpeachable certificate authority.", "severity": "INFO"}}, "android_root_detection": {"metadata": {"cwe": "CWE-919: Weaknesses in Mobile Applications", "owasp-mobile": "M8: Code Tampering", "masvs": "MSTG-RESILIENCE-1", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1", "description": "This app does not have root detection capabilities. Running a sensitive application on a rooted device questions the device integrity and affects users data.", "severity": "INFO"}}, "android_certificate_pinning": {"metadata": {"cwe": "CWE-295: Improper Certificate Validation", "owasp-mobile": "M3: Insecure Communication", "masvs": "MSTG-NETWORK-4", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4", "description": "This app does not use a TLS/SSL certificate or public key pinning in code to detect or prevent MITM attacks in secure communication channel. Please verify if pinning is enabled in `network_security_config.xml`.", "severity": "INFO"}}}, "errors": []}