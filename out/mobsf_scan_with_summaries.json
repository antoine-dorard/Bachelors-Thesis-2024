{"results": {"android_logging": {"files": [{"file_path": "vulnerableapp/LoginService.java", "match_position": [9, 44], "match_lines": [10, 10], "match_string": "        System.out.println(hashedPassword);", "summaries": {"method": "The code defines a method that hashes the provided password, prints the hashed password, and then checks if the email and hashed password match the credentials stored in the database.", "class": "This Java class handles login operations by hashing the password and checking credentials in a database.", "cluster": "The cluster of methods includes a `login` method that first hashes the password using SHA-1, then checks the hashed password against the stored credentials in a database, a `hashSHA256` method that hashes a given input using SHA-1, and a `bytesToHex` method that converts a byte array to a hexadecimal string representation."}}], "metadata": {"cwe": "CWE-532: Insertion of Sensitive Information into Log File", "masvs": "MSTG-STORAGE-3", "owasp-mobile": "M1: Improper Platform Usage", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#logs", "description": "The App logs information. Please ensure that sensitive information is never logged.", "severity": "INFO"}}, "hardcoded_username": {"files": [{"file_path": "vulnerableapp/Main.java", "match_position": [9, 88], "match_lines": [15, 15], "match_string": "        boolean loginSuccess = loginService.login(\"user@vulnerableapp.com\", \"weakpass\");", "summaries": {"method": "The code loads user data from a JSON file, demonstrates a login process using a LoginService, generates a report with user information and hashes it if the login is successful.", "class": "This code demonstrates user login functionality, generating reports for all users in a database, and handling exceptions.", "cluster": "The cluster of methods retrieves user data from a database, performs a user login based on the retrieved data, generates a report containing user information in the form of a PDF, and demonstrates exception handling for PDF generation and hashing."}}], "metadata": {"cwe": "CWE-798: Use of Hard-coded Credentials", "masvs": "MSTG-STORAGE-14", "owasp-mobile": "M9: Reverse Engineering", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example", "description": "A hardcoded username in plain text is identified.", "severity": "WARNING"}}, "sha1_hash": {"files": [{"file_path": "vulnerableapp/HashingUtils.java", "match_position": [13, 66], "match_lines": [7, 7], "match_string": "            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");", "summaries": {"method": "This Java code defines a method that hashes a given input using the SHA-1 algorithm and returns the result as a hexadecimal string.", "class": "The provided code defines a class HashingUtils with a method to hash a string using SHA-1 algorithm and another method to convert the hashed bytes to a hexadecimal string representation.", "cluster": "The cluster of methods includes a `login` method that first hashes the password using SHA-1, then checks the hashed password against the stored credentials in a database, a `hashSHA256` method that hashes a given input using SHA-1, and a `bytesToHex` method that converts a byte array to a hexadecimal string representation."}}, {"file_path": "vulnerableapp/Report.java", "match_position": [9, 66], "match_lines": [45, 45], "match_string": "        MessageDigest digest = MessageDigest.getInstance(\"SHA-1\");", "summaries": {"method": "This code computes the SHA-1 hash of a byte array and returns it as a hexadecimal string.", "class": "The code defines a \"Report\" class with methods to generate a PDF file from user data, compute and write its hash value.", "cluster": "These methods generate a PDF document with user data, save it to a file, compute the hash of the PDF content using SHA-1 algorithm, and optionally write the hash to a separate file."}}], "metadata": {"cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "masvs": "MSTG-CRYPTO-4", "owasp-mobile": "M5: Insufficient Cryptography", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4", "description": "SHA1 Hash algorithm used. The SHA1 hash is known to have hash collisions.", "severity": "WARNING"}}, "android_detect_tapjacking": {"metadata": {"cwe": "CWE-200: Information Exposure", "owasp-mobile": "M1: Improper Platform Usage", "masvs": "MSTG-PLATFORM-9", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-for-overlay-attacks-mstg-platform-9", "description": "This app does not have capabilities to prevent tapjacking attacks. An attacker can hijack the user's taps and tricks him into performing some critical operations that he did not intend to.", "severity": "INFO"}}, "android_prevent_screenshot": {"metadata": {"cwe": "CWE-200: Information Exposure", "owasp-mobile": "M2: Insecure Data Storage", "masvs": "MSTG-STORAGE-9", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#finding-sensitive-information-in-auto-generated-screenshots-mstg-storage-9", "description": "This app does not have capabilities to prevent against Screenshots from Recent Task History/ Now On Tap etc.", "severity": "INFO"}}, "android_certificate_pinning": {"metadata": {"cwe": "CWE-295: Improper Certificate Validation", "owasp-mobile": "M3: Insecure Communication", "masvs": "MSTG-NETWORK-4", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4", "description": "This app does not use a TLS/SSL certificate or public key pinning in code to detect or prevent MITM attacks in secure communication channel. Please verify if pinning is enabled in `network_security_config.xml`.", "severity": "INFO"}}, "android_certificate_transparency": {"metadata": {"cwe": "CWE-295: Improper Certificate Validation", "owasp-mobile": "M3: Insecure Communication", "masvs": "MSTG-NETWORK-4", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4", "description": "This app does not enforce TLS Certificate Transparency that helps to detect SSL certificates that have been mistakenly issued by a certificate authority or maliciously acquired from an otherwise unimpeachable certificate authority.", "severity": "INFO"}}, "android_safetynet_api": {"metadata": {"cwe": "CWE-353: Missing Support for Integrity Check", "owasp-mobile": "M8: Code Tampering", "masvs": "MSTG-RESILIENCE-1", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1", "description": "This app does not uses SafetyNet Attestation API that provides cryptographically-signed attestation, assessing the device's integrity. This check helps to ensure that the servers are interacting with the genuine app running on a genuine Android device. ", "severity": "INFO"}}, "android_root_detection": {"metadata": {"cwe": "CWE-919: Weaknesses in Mobile Applications", "owasp-mobile": "M8: Code Tampering", "masvs": "MSTG-RESILIENCE-1", "reference": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1", "description": "This app does not have root detection capabilities. Running a sensitive application on a rooted device questions the device integrity and affects users data.", "severity": "INFO"}}}, "errors": []}