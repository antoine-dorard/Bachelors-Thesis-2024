[{"path": "vulnerableapp/DBManager.java", "code": "import com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n\npublic class DBManager {\n    private Map<String, String> users = new HashMap<>();\n\n    public DBManager(String filename) {\n        loadUsers(filename);\n    }\n\n    private void loadUsers(String filename) {\n        try (Reader reader = new FileReader(filename)) {\n            Type type = new TypeToken<List<User>>(){}.getType();\n            List<User> userList = new Gson().fromJson(reader, type);\n            userList.forEach(user -> users.put(user.getEmail(), user.getPassword()));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean checkCredentials(String email, String hashedPassword) {\n        String storedhashedPassword = users.get(email);\n        return storedhashedPassword != null && storedhashedPassword.equals(hashedPassword);\n    }\n\n    public List<User> getAllUsers() {\n        return users.entrySet().stream()\n                .map(entry -> new User(entry.getKey(), entry.getValue()))\n                .collect(Collectors.toList());\n    }\n\n    public class User {\n        private String email;\n        private String password;\n\n        public User(String email, String password) {\n            this.email = email;\n            this.password = password;\n        }\n\n        public String getEmail() {\n            return email;\n        }\n\n        public String getPassword() {\n            return password;\n        }\n    }\n}\n", "classes": [{"parent_file": null, "name": "DBManager", "position": {"start_line": 12, "end_line": 57, "start_column": 8, "end_column": 1}, "code": "class DBManager {\n    private Map<String, String> users = new HashMap<>();\n\n    public DBManager(String filename) {\n        loadUsers(filename);\n    }\n\n    private void loadUsers(String filename) {\n        try (Reader reader = new FileReader(filename)) {\n            Type type = new TypeToken<List<User>>(){}.getType();\n            List<User> userList = new Gson().fromJson(reader, type);\n            userList.forEach(user -> users.put(user.getEmail(), user.getPassword()));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean checkCredentials(String email, String hashedPassword) {\n        String storedhashedPassword = users.get(email);\n        return storedhashedPassword != null && storedhashedPassword.equals(hashedPassword);\n    }\n\n    public List<User> getAllUsers() {\n        return users.entrySet().stream()\n                .map(entry -> new User(entry.getKey(), entry.getValue()))\n                .collect(Collectors.toList());\n    }\n\n    public class User {\n        private String email;\n        private String password;\n\n        public User(String email, String password) {\n            this.email = email;\n            this.password = password;\n        }\n\n        public String getEmail() {\n            return email;\n        }\n\n        public String getPassword() {\n            return password;\n        }\n    }\n}", "summary": "", "methods": [{"name": "loadUsers", "return_type": "void", "position": {"start_line": 19, "end_line": 27, "start_column": 13, "end_column": 5}, "code": "void loadUsers(String filename) {\n        try (Reader reader = new FileReader(filename)) {\n            Type type = new TypeToken<List<User>>(){}.getType();\n            List<User> userList = new Gson().fromJson(reader, type);\n            userList.forEach(user -> users.put(user.getEmail(), user.getPassword()));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "summary": "", "parent": null, "parent_cluster": null, "is_vulnerable": false, "vulnerability_metadata": null, "vulnerability": null, "matched_string": "", "parameters": [{"name": "filename", "type": "String"}]}, {"name": "checkCredentials", "return_type": "boolean", "position": {"start_line": 29, "end_line": 32, "start_column": 12, "end_column": 5}, "code": "boolean checkCredentials(String email, String hashedPassword) {\n        String storedhashedPassword = users.get(email);\n        return storedhashedPassword != null && storedhashedPassword.equals(hashedPassword);\n    }", "summary": "", "parent": null, "parent_cluster": null, "is_vulnerable": false, "vulnerability_metadata": null, "vulnerability": null, "matched_string": "", "parameters": [{"name": "email", "type": "String"}, {"name": "hashedPassword", "type": "String"}]}, {"name": "getAllUsers", "return_type": "List", "position": {"start_line": 34, "end_line": 38, "start_column": 12, "end_column": 5}, "code": "List<User> getAllUsers() {\n        return users.entrySet().stream()\n                .map(entry -> new User(entry.getKey(), entry.getValue()))\n                .collect(Collectors.toList());\n    }", "summary": "", "parent": null, "parent_cluster": null, "is_vulnerable": false, "vulnerability_metadata": null, "vulnerability": null, "matched_string": "", "parameters": []}]}, {"parent_file": null, "name": "User", "position": {"start_line": 40, "end_line": 56, "start_column": 12, "end_column": 5}, "code": "class User {\n        private String email;\n        private String password;\n\n        public User(String email, String password) {\n            this.email = email;\n            this.password = password;\n        }\n\n        public String getEmail() {\n            return email;\n        }\n\n        public String getPassword() {\n            return password;\n        }\n    }", "summary": "", "methods": [{"name": "getEmail", "return_type": "String", "position": {"start_line": 49, "end_line": 51, "start_column": 16, "end_column": 9}, "code": "String getEmail() {\n            return email;\n        }", "summary": "", "parent": null, "parent_cluster": null, "is_vulnerable": false, "vulnerability_metadata": null, "vulnerability": null, "matched_string": "", "parameters": []}, {"name": "getPassword", "return_type": "String", "position": {"start_line": 53, "end_line": 55, "start_column": 16, "end_column": 9}, "code": "String getPassword() {\n            return password;\n        }", "summary": "", "parent": null, "parent_cluster": null, "is_vulnerable": false, "vulnerability_metadata": null, "vulnerability": null, "matched_string": "", "parameters": []}]}]}, {"path": "vulnerableapp/HashingUtils.java", "code": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class HashingUtils {\n    public static String hashSHA256(String input) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            byte[] hashedBytes = md.digest(input.getBytes());\n            return bytesToHex(hashedBytes, null, null);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private static String bytesToHex(byte[] bytes, byte[][] bytes2, java.security.MessageDigest md) {\n        StringBuilder hexString = new StringBuilder(2 * bytes.length);\n        for (byte b : bytes) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) {\n                hexString.append('0');\n            }\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }\n}\n", "classes": [{"parent_file": null, "name": "HashingUtils", "position": {"start_line": 4, "end_line": 27, "start_column": 8, "end_column": 1}, "code": "class HashingUtils {\n    public static String hashSHA256(String input) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            byte[] hashedBytes = md.digest(input.getBytes());\n            return bytesToHex(hashedBytes, null, null);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private static String bytesToHex(byte[] bytes, byte[][] bytes2, java.security.MessageDigest md) {\n        StringBuilder hexString = new StringBuilder(2 * bytes.length);\n        for (byte b : bytes) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) {\n                hexString.append('0');\n            }\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }\n}", "summary": "", "methods": [{"name": "hashSHA256", "return_type": "String", "position": {"start_line": 5, "end_line": 14, "start_column": 19, "end_column": 5}, "code": "String hashSHA256(String input) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            byte[] hashedBytes = md.digest(input.getBytes());\n            return bytesToHex(hashedBytes, null, null);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }", "summary": "", "parent": null, "parent_cluster": null, "is_vulnerable": false, "vulnerability_metadata": null, "vulnerability": null, "matched_string": "", "parameters": [{"name": "input", "type": "String"}]}, {"name": "bytesToHex", "return_type": "String", "position": {"start_line": 16, "end_line": 26, "start_column": 20, "end_column": 5}, "code": "String bytesToHex(byte[] bytes, byte[][] bytes2, java.security.MessageDigest md) {\n        StringBuilder hexString = new StringBuilder(2 * bytes.length);\n        for (byte b : bytes) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) {\n                hexString.append('0');\n            }\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }", "summary": "", "parent": null, "parent_cluster": null, "is_vulnerable": false, "vulnerability_metadata": null, "vulnerability": null, "matched_string": "", "parameters": [{"name": "bytes", "type": "byte"}, {"name": "bytes2", "type": "byte"}, {"name": "md", "type": "java.security.MessageDigest"}]}]}]}, {"path": "vulnerableapp/LoginService.java", "code": "public class LoginService {\n    private DBManager dbManager;\n\n    public LoginService(DBManager dbManager) {\n        this.dbManager = dbManager;\n    }\n\n    public boolean login(String email, String password) {\n        String hashedPassword = HashingUtils.hashSHA256(password);\n        System.out.println(hashedPassword);\n        \n        return dbManager.checkCredentials(email, hashedPassword);\n    }\n}\n", "classes": [{"parent_file": null, "name": "LoginService", "position": {"start_line": 1, "end_line": 14, "start_column": 8, "end_column": 1}, "code": "class LoginService {\n    private DBManager dbManager;\n\n    public LoginService(DBManager dbManager) {\n        this.dbManager = dbManager;\n    }\n\n    public boolean login(String email, String password) {\n        String hashedPassword = HashingUtils.hashSHA256(password);\n        System.out.println(hashedPassword);\n        \n        return dbManager.checkCredentials(email, hashedPassword);\n    }\n}", "summary": "", "methods": [{"name": "login", "return_type": "boolean", "position": {"start_line": 8, "end_line": 13, "start_column": 12, "end_column": 5}, "code": "boolean login(String email, String password) {\n        String hashedPassword = HashingUtils.hashSHA256(password);\n        System.out.println(hashedPassword);\n        \n        return dbManager.checkCredentials(email, hashedPassword);\n    }", "summary": "", "parent": null, "parent_cluster": null, "is_vulnerable": false, "vulnerability_metadata": null, "vulnerability": null, "matched_string": "", "parameters": [{"name": "email", "type": "String"}, {"name": "password", "type": "String"}]}]}]}, {"path": "vulnerableapp/Main.java", "code": "import com.itextpdf.text.DocumentException;\n\nimport java.io.IOException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Load user data from JSON\n        DBManager dbManager = new DBManager(\"users.json\");\n\n        // Demonstrate login\n        LoginService loginService = new LoginService(dbManager);\n        boolean loginSuccess = loginService.login(\"user@vulnerableapp.com\", \"weakpass\");\n\n        // Generate a report listing all users and calculate hash\n        List<String> userData = new ArrayList<>();\n        dbManager.getAllUsers().forEach(user -> userData.add(user.getEmail() + \" - \" + user.getPassword()));\n\n        if(loginSuccess) {\n            System.out.println(\"Login Successful. Generating report.\");\n\n            Report report = new Report();\n            try {\n                report.generatePDFAndHash(\"UserReport.pdf\", userData);\n                System.out.println(\"PDF and hash generated successfully.\");\n            } catch (DocumentException | IOException | NoSuchAlgorithmException e) {\n                e.printStackTrace();\n            }\n        } else {\n            System.out.println(\"Login Unsuccessful\");\n        }\n    }\n}\n", "classes": [{"parent_file": null, "name": "Main", "position": {"start_line": 8, "end_line": 35, "start_column": 8, "end_column": 1}, "code": "class Main {\n    public static void main(String[] args) {\n        // Load user data from JSON\n        DBManager dbManager = new DBManager(\"users.json\");\n\n        // Demonstrate login\n        LoginService loginService = new LoginService(dbManager);\n        boolean loginSuccess = loginService.login(\"user@vulnerableapp.com\", \"weakpass\");\n\n        // Generate a report listing all users and calculate hash\n        List<String> userData = new ArrayList<>();\n        dbManager.getAllUsers().forEach(user -> userData.add(user.getEmail() + \" - \" + user.getPassword()));\n\n        if(loginSuccess) {\n            System.out.println(\"Login Successful. Generating report.\");\n\n            Report report = new Report();\n            try {\n                report.generatePDFAndHash(\"UserReport.pdf\", userData);\n                System.out.println(\"PDF and hash generated successfully.\");\n            } catch (DocumentException | IOException | NoSuchAlgorithmException e) {\n                e.printStackTrace();\n            }\n        } else {\n            System.out.println(\"Login Unsuccessful\");\n        }\n    }\n}", "summary": "", "methods": [{"name": "main", "return_type": "void", "position": {"start_line": 9, "end_line": 34, "start_column": 19, "end_column": 5}, "code": "void main(String[] args) {\n        // Load user data from JSON\n        DBManager dbManager = new DBManager(\"users.json\");\n\n        // Demonstrate login\n        LoginService loginService = new LoginService(dbManager);\n        boolean loginSuccess = loginService.login(\"user@vulnerableapp.com\", \"weakpass\");\n\n        // Generate a report listing all users and calculate hash\n        List<String> userData = new ArrayList<>();\n        dbManager.getAllUsers().forEach(user -> userData.add(user.getEmail() + \" - \" + user.getPassword()));\n\n        if(loginSuccess) {\n            System.out.println(\"Login Successful. Generating report.\");\n\n            Report report = new Report();\n            try {\n                report.generatePDFAndHash(\"UserReport.pdf\", userData);\n                System.out.println(\"PDF and hash generated successfully.\");\n            } catch (DocumentException | IOException | NoSuchAlgorithmException e) {\n                e.printStackTrace();\n            }\n        } else {\n            System.out.println(\"Login Unsuccessful\");\n        }\n    }", "summary": "", "parent": null, "parent_cluster": null, "is_vulnerable": false, "vulnerability_metadata": null, "vulnerability": null, "matched_string": "", "parameters": [{"name": "args", "type": "String"}]}]}]}, {"path": "vulnerableapp/Report.java", "code": "import com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.List;\n\npublic class Report {\n    public void generatePDFAndHash(String filename, List<String> userData) throws DocumentException, IOException, NoSuchAlgorithmException {\n        Document document = new Document();\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        PdfWriter.getInstance(document, byteArrayOutputStream);\n        document.open();\n        userData.forEach(data -> {\n            try {\n                document.add(new Paragraph(data));\n            } catch (DocumentException e) {\n                e.printStackTrace();\n            }\n        });\n        document.close();\n\n        // Get the PDF data\n        byte[] pdfData = byteArrayOutputStream.toByteArray();\n\n        // Write PDF data to file\n        try (FileOutputStream fileOutputStream = new FileOutputStream(filename)) {\n            fileOutputStream.write(pdfData);\n        }\n\n        // Compute hash of the PDF data\n        String hash = computeHash(pdfData);\n\n        // Optionally, write the hash to a separate file or include it in the PDF\n        try (FileOutputStream hashStream = new FileOutputStream(filename + \".hash\")) {\n            hashStream.write(hash.getBytes());\n        }\n    }\n\n    private String computeHash(byte[] data) throws NoSuchAlgorithmException {\n        MessageDigest digest = MessageDigest.getInstance(\"SHA-1\");\n        byte[] encodedhash = digest.digest(data);\n        StringBuilder hexString = new StringBuilder(2 * encodedhash.length);\n        for (byte b : encodedhash) {\n            String hex = Integer.toHexString(0xff & b);\n            if(hex.length() == 1) hexString.append('0');\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }\n}\n", "classes": [{"parent_file": null, "name": "Report", "position": {"start_line": 12, "end_line": 55, "start_column": 8, "end_column": 1}, "code": "class Report {\n    public void generatePDFAndHash(String filename, List<String> userData) throws DocumentException, IOException, NoSuchAlgorithmException {\n        Document document = new Document();\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        PdfWriter.getInstance(document, byteArrayOutputStream);\n        document.open();\n        userData.forEach(data -> {\n            try {\n                document.add(new Paragraph(data));\n            } catch (DocumentException e) {\n                e.printStackTrace();\n            }\n        });\n        document.close();\n\n        // Get the PDF data\n        byte[] pdfData = byteArrayOutputStream.toByteArray();\n\n        // Write PDF data to file\n        try (FileOutputStream fileOutputStream = new FileOutputStream(filename)) {\n            fileOutputStream.write(pdfData);\n        }\n\n        // Compute hash of the PDF data\n        String hash = computeHash(pdfData);\n\n        // Optionally, write the hash to a separate file or include it in the PDF\n        try (FileOutputStream hashStream = new FileOutputStream(filename + \".hash\")) {\n            hashStream.write(hash.getBytes());\n        }\n    }\n\n    private String computeHash(byte[] data) throws NoSuchAlgorithmException {\n        MessageDigest digest = MessageDigest.getInstance(\"SHA-1\");\n        byte[] encodedhash = digest.digest(data);\n        StringBuilder hexString = new StringBuilder(2 * encodedhash.length);\n        for (byte b : encodedhash) {\n            String hex = Integer.toHexString(0xff & b);\n            if(hex.length() == 1) hexString.append('0');\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }\n}", "summary": "", "methods": [{"name": "generatePDFAndHash", "return_type": "void", "position": {"start_line": 13, "end_line": 42, "start_column": 12, "end_column": 5}, "code": "void generatePDFAndHash(String filename, List<String> userData) throws DocumentException, IOException, NoSuchAlgorithmException {\n        Document document = new Document();\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        PdfWriter.getInstance(document, byteArrayOutputStream);\n        document.open();\n        userData.forEach(data -> {\n            try {\n                document.add(new Paragraph(data));\n            } catch (DocumentException e) {\n                e.printStackTrace();\n            }\n        });\n        document.close();\n\n        // Get the PDF data\n        byte[] pdfData = byteArrayOutputStream.toByteArray();\n\n        // Write PDF data to file\n        try (FileOutputStream fileOutputStream = new FileOutputStream(filename)) {\n            fileOutputStream.write(pdfData);\n        }\n\n        // Compute hash of the PDF data\n        String hash = computeHash(pdfData);\n\n        // Optionally, write the hash to a separate file or include it in the PDF\n        try (FileOutputStream hashStream = new FileOutputStream(filename + \".hash\")) {\n            hashStream.write(hash.getBytes());\n        }\n    }", "summary": "", "parent": null, "parent_cluster": null, "is_vulnerable": false, "vulnerability_metadata": null, "vulnerability": null, "matched_string": "", "parameters": [{"name": "filename", "type": "String"}, {"name": "userData", "type": "List"}]}, {"name": "computeHash", "return_type": "String", "position": {"start_line": 44, "end_line": 54, "start_column": 13, "end_column": 5}, "code": "String computeHash(byte[] data) throws NoSuchAlgorithmException {\n        MessageDigest digest = MessageDigest.getInstance(\"SHA-1\");\n        byte[] encodedhash = digest.digest(data);\n        StringBuilder hexString = new StringBuilder(2 * encodedhash.length);\n        for (byte b : encodedhash) {\n            String hex = Integer.toHexString(0xff & b);\n            if(hex.length() == 1) hexString.append('0');\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }", "summary": "", "parent": null, "parent_cluster": null, "is_vulnerable": false, "vulnerability_metadata": null, "vulnerability": null, "matched_string": "", "parameters": [{"name": "data", "type": "byte"}]}]}]}]